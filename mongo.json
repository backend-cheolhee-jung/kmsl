db.employees.insertOne({
    name: "lake",
    age: 21,
    dept: "Database",
    joinDate: new ISODate("2022-10-01"),
    salary: 400000,
    bonus: null
})

db.employees.insertMany([
    {
        name: "ocean",
        age: 45,
        dept: "Network",
        joinDate: new ISODate("1999-11-15"),
        salary: 100000,
        resignationDate: new ISODate("2002-12-23"),
        bonus: null
    },
    {
        name: "river",
        age: 34,
        dept: "DevOps",
        isNegotiating: true
    }
])
/**
 *   mongo shell 에서 기본적인 javascript code 작성이 가능하다.
 */
for (i = 0; i< 300; i++) {
    db.insertTest.insertOne({a: i})
}

/**
 *   insert many 가 개별 쿼리보다 성능이 월등하게 좋다.
 */
var docs = [];

for (i = 0; i< 300; i++) {
    docs.push({a: i})
}

db.insertTest.insertMany(docs)

/**
 *   update One
 */
db.employees.updateOne(
    { name: "river"},
    {
        $set: {
            salary: 350000,
            dept: "Database",
            joinDate: new ISODate("2022-12-31")
        },
        $unset: {
            isNegotiating: ""
        }
    }
)

/**
 *   update Many
 */
db.employees.updateMany(
    { resignationDate: {$exists: false}, joinDate: {$exists: true} },
    { $mul: {salary: Decimal128("1.1")} }
)

/**
 *   null 에 대한 취급 = 필드 자체가 없어도 null 로 취급함
 */
db.employees.updateMany(
    { resignationDate: {$exists: false}, bonus: null },
    { $set: {bonus: 100000} }
)

/**
 *   필드가 없는 데이터에 필터를 걸 때는 아래와 같이 활용
 */
db.employees.updateMany(
    { resignationDate: {$exists: false}, bonus: {$exists: true} },
    { $set: {bonus: 200000} }
)

/**
 * 삭제
 */
db.employees.deleteOne({ name: "river"})

/**
 * 전체 삭제
 */
db.employees.deleteMany({})