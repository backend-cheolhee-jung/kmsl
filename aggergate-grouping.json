db.order.aggregate([
    {
        $match: {
          size : "medium"
        }
    },
    {
        $group: {
            _id: { $getField : "name" },
            totalQuantity: { $sum: { "$getField" : "quantity" } }
        }
    }
])

// $getField 는 아래 처럼 생략 하여 사용할 수 있음
db.order.aggregate([
    {
        $match: {
          size : "medium"
        }
    },
    {
        $group: {
            _id: "$name",
            totalQuantity: { $sum: "$quantity" }
        }
    }
])

db.order.aggregate([
    {
        $match: {
           $gte : { date : new ISODate("2019-01-01") },
           $lt : { date : new ISODate("2019-01-01") }
        }
    },
    {
        $group: {
            _id: { $dateToString: { format: "%Y-%m-%d", date: "$date" } },
            totalOrderValue: { $sum: { $multiply : ["$price" , "$quantity"] } },
            averageQuantity: { $avg: "$quantity" }
        }
    },
    {
        $sort: { averageQuantity: -1 }
    }
])

db.books.aggregate([
    {
        $group: {
            _id: "author",
            books: { $push: "$title" }
        }
    }
])

db.books.aggregate([
    {
        $group: {
            _id: "author",
            books: { $push: "$$ROOT" }
        }
    }
])

db.books.aggregate([
    {
        $sample: { size: 3 }
    },
    {
        $project: {
            title: 1,
            summary: 1
        }
    }
])

db.books.aggregate([
    {
        $sample: { size: 3 }
    },
    {
        $sort: { title: 1 }
    },
    {
        $skip: 5
    },
    {
        $limit: 5
    },
    {
        $project: {
            title: 1,
            summary: 1
        }
    }
])

db.books.aggregate([
    {
        $group: {
            _id: "author",
            books: { $push: "$title" }
        }
    },
    {
        $out: "authors"
    }
])