/**
 * bulkWrite 는 여러 개의 작업을 한번에 처리할 수 있는 메서드 이다.
 * ordered 옵션을 통해 순서를 지정할 수 있다.
 * ordered 옵션을 false 로 지정 하면 순서를 무시 하고 처리 하며 성능이 최적화 된다.
 * ex) delete 가 먼저 실행이 될 수도 있다.
 */
db.bulk.bulkWrite(
    [
      { insertOne: { doc: 1, order: 1 } },
      { insertOne: { doc: 2, order: 2 } },
      { insertOne: { doc: 3, order: 3 } },
      { insertOne: { doc: 4, order: 4 } },
      { insertOne: { doc: 5, order: 5 } },
      { insertOne: { doc: 6, order: 6 } },
      { deleteOne: {filter: { doc: 3} } },
      { updateOne: { filter: { doc: 2 }, update: { $set: { doc: 12 } } } }
    ],
    { ordered: false }
)

/**
 * countDocuments 는 컬렉션 의 전체 문서 수를 반환 한다.
 * estimateDocumentCount 는 컬렉션 의 전체 문서 수를 예상 하여 반환 한다. (성능 최적화)
 */
db.bulk.countDocuments()
db.bulk.estimteDocumentCount()

/**
 * mysql 의 auto_increment, oracle 의 sequence 와 같이
 * mongodb 에서는 findAndModify 를 사용 하여 auto_increment 를 구현 할 수 있다.
 * 순차적 으로 증가 하기 때문에 성능 이슈가 발생 할 수 있다.
 * 또한 동시성 이슈가 발생 할 수 있다.
 */
db.bulk.findAndModify({
    query: { doc: 4 },
    update: { $inc: { doc: 1 } }
})

/**
 * 아래와 같이 사용 하면 동시성 이슈를 해결 할 수 있다.
 */
db.sequence.findAndModify({
    query: {},
    sort: { seq: -1 },
    update: { $inc: { seq: 1 } }
})

/**
 * replaceOne 을 사용 하면 문서 전체를 변경 할 수 있다.
 * 하지만 mongodb 에서는 _id 값을 변경 할 수 없다.
 * 그래서 _id 값을 제외한 모든 필드가 변경이 된다.
 */

db.bulk.replaceOne(
    { doc: 1 },
    { doc: 19 }
)