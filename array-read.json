/**
 * 동일해 보이는 쿼리 지만 순서가 다르면 결과가 다르다.
 */

db.sales.findOne({
    customer: {
        $elemMatch: {
            email: "abcd@gmail.com",
            age: 25,
            satisfaction: 5,
            gender: "M"
        }
    }
})

db.sales.findOne({
    customer: {
        $elemMatch: {
            age: 25,
            satisfaction: 5,
            email: "abcd@gmail.com",
            gender: "M"
        }
    }
})

/**
 * . 을 사용 내장 document 에 접근 할 수 있다.
 */
db.sales.findOne({
    "customer.email": "abcd@gmail.com",
})

/**
 * 배열도 마찬 가지로 query 의 순서에 따라 결과가 달라 진다.
 */
db.enventory.find({
    tag: ["gift", "shop", "order"]
})

/**
 * $all 을 사용 하면 순서에 상관 없이 포함 했는지 여부로 찾을 수 있다.
 */
db.enventory.find({
    tag: { $all: ["gift", "shop", "order"] }
})

/**
 * $in 을 사용 하면 순서에 상관 없이 배열의 값 중 하나 라도 포함 했다면 찾을 수 있다.
 */
db.enventory.find({
    tag: { $in: ["gift", "shop"] }
})

/**
 * $gt, $lt 를 사용 하면 배열에 포함된 값 중 숫자가 크거나 작은 값을 찾을 수 있다.
 * 하지만 between 의 개념이 아니라 배열의 값 중 하나 라도 조건에 맞으면 찾는다.
 */
db.enventory.find({
    price: { $gt: 100, $lt: 200 }
})

/**
 * $elemMatch 를 사용 하면 배열의 값 중 조건에 맞는 값을 찾을 수 있다.
 * between 의 개념 으로 조건에 만족 하는 값을 찾을 때 사용 할 수 있다.
 */
db.enventory.find({
    price: { $elemMatch: { $gt: 100, $lt: 200 } }
})

/**
 * projection 을 사용 하면 찾은 값 중 원하는 값 만 가져 올 수 있다.
 * 지금은 tag.$ 를 사용 하면 배열의 첫번째 값만 가져 왔다.
 */
db.enventory.find(
    {
        price: {
            $elemMatch: { $gt: 100, $lt: 200 }
        }
    },
    {
        createdAt: 1,
        tag.$: 1,
        price: 1,
    }
)